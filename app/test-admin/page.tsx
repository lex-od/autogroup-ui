'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, AlertTriangle, Clock } from 'lucide-react';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
import { 
  AdminDashboard, 
  UserManagement, 
  ApiConfigurationManagement, 
  PromptManagement 
} from '@/components/admin';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { 
  MultiAccountDashboard,
  OrganizationSelector,
  AccountSwitcher
} from '@/components/multi-account';

const TestAdminPage = () => {
  const [testResults, setTestResults] = useState<Record<string, 'success' | 'error' | 'pending'>>({
    adminDashboard: 'pending',
    userManagement: 'pending',
    apiManagement: 'pending',
    promptManagement: 'pending',
    multiAccount: 'pending',
    organizationSelector: 'pending',
    accountSwitcher: 'pending'
  });

  const runTest = (testName: string, testFn: () => boolean) => {
    try {
      const result = testFn();
      setTestResults(prev => ({
        ...prev,
        [testName]: result ? 'success' : 'error'
      }));
    } catch (error) {
      console.error(`Test ${testName} failed:`, error);
      setTestResults(prev => ({
        ...prev,
        [testName]: 'error'
      }));
    }
  };

  const runAllTests = () => {
    // –¢–µ—Å—Ç 1: AdminDashboard
    runTest('adminDashboard', () => {
      try {
        AdminDashboard({ className: 'test' });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 2: UserManagement
    runTest('userManagement', () => {
      try {
        UserManagement({ className: 'test' });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 3: ApiConfigurationManagement  
    runTest('apiManagement', () => {
      try {
        ApiConfigurationManagement({ className: 'test' });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 4: PromptManagement
    runTest('promptManagement', () => {
      try {
        PromptManagement({ className: 'test' });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 5: MultiAccountDashboard
    runTest('multiAccount', () => {
      try {
        MultiAccountDashboard({
          selectedOrganization: null,
          selectedAccount: null
        });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 6: OrganizationSelector
    runTest('organizationSelector', () => {
      try {
        OrganizationSelector({ value: null });
        return true;
      } catch {
        return false;
      }
    });

    // –¢–µ—Å—Ç 7: AccountSwitcher
    runTest('accountSwitcher', () => {
      try {
        AccountSwitcher({ value: null });
        return true;
      } catch {
        return false;
      }
    });
  };

  const getStatusIcon = (status: 'success' | 'error' | 'pending') => {
    switch (status) {
      case 'success': return <CheckCircle className="h-5 w-5 text-green-600" />;
      case 'error': return <XCircle className="h-5 w-5 text-red-600" />;
      case 'pending': return <Clock className="h-5 w-5 text-gray-400" />;
    }
  };

  const getStatusBadge = (status: 'success' | 'error' | 'pending') => {
    switch (status) {
      case 'success': return <Badge className="bg-green-100 text-green-800">‚úÖ –£—Å–ø–µ—à–Ω–æ</Badge>;
      case 'error': return <Badge variant="destructive">‚ùå –û—à–∏–±–∫–∞</Badge>;
      case 'pending': return <Badge variant="outline">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ</Badge>;
    }
  };

  const allSuccessful = Object.values(testResults).every(status => status === 'success');
  const hasErrors = Object.values(testResults).some(status => status === 'error');

  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-900">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</CardTitle>
          <CardDescription className="text-blue-700">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <Button onClick={runAllTests} className="gap-2">
              üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
            </Button>
            {allSuccessful && (
              <Badge className="bg-green-100 text-green-800">
                üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!
              </Badge>
            )}
            {hasErrors && (
              <Badge variant="destructive">
                ‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {Object.entries(testResults).map(([testName, status]) => (
          <Card key={testName}>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getStatusIcon(status)}
                  <div>
                    <div className="font-medium">
                      {testName === 'adminDashboard' && 'AdminDashboard'}
                      {testName === 'userManagement' && 'UserManagement'}
                      {testName === 'apiManagement' && 'ApiConfigurationManagement'}
                      {testName === 'promptManagement' && 'PromptManagement'}
                      {testName === 'multiAccount' && 'MultiAccountDashboard'}
                      {testName === 'organizationSelector' && 'OrganizationSelector'}
                      {testName === 'accountSwitcher' && 'AccountSwitcher'}
                    </div>
                    <div className="text-sm text-gray-500">
                      –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è {' '}
                      {testName === 'adminDashboard' && '–≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'}
                      {testName === 'userManagement' && '—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'}
                      {testName === 'apiManagement' && '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–µ–π'}
                      {testName === 'promptManagement' && '—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏'}
                      {testName === 'multiAccount' && '–º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç–æ–≤'}
                      {testName === 'organizationSelector' && '–≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}
                      {testName === 'accountSwitcher' && '–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤'}
                    </div>
                  </div>
                </div>
                {getStatusBadge(status)}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <div className="font-medium mb-2">‚úÖ –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º:</div>
              <ul className="space-y-1 text-gray-600">
                <li>‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤</li>
                <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
                <li>‚Ä¢ TypeScript —Ç–∏–ø—ã</li>
                <li>‚Ä¢ React props</li>
                <li>‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ runtime –æ—à–∏–±–æ–∫</li>
              </ul>
            </div>
            <div>
              <div className="font-medium mb-2">üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</div>
              <ul className="space-y-1 text-gray-600">
                <li>‚Ä¢ React 19</li>
                <li>‚Ä¢ TypeScript 5</li>
                <li>‚Ä¢ Next.js 15</li>
                <li>‚Ä¢ TanStack Query</li>
                <li>‚Ä¢ shadcn/ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</li>
              </ul>
            </div>
            <div>
              <div className="font-medium mb-2">üìà –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏:</div>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <span className="text-green-600">Next.js build: OK</span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <span className="text-green-600">TypeScript: OK</span>
                </div>
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <span className="text-yellow-600">ESLint: 1 warning</span>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TestAdminPage; 